#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

=======
# fail fast
set -e

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# Load vars
[ -s $BUILD_DIR/Edgejs ] && . $BUILD_DIR/Edgejs

# Override HOME environment
export HOME_APP=$HOME
export HOME=$BUILD_DIR

# Force APT_OPTIONS to override default values
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_OPTIONS="-o debug::nolocking=true -o dir::state=$APT_STATE_DIR"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::SourceList=$LP_DIR/conf/sources.list"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::Trusted=$BUILD_DIR/temp/trusted.gpg"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::Preferences=$LP_DIR/conf/preferences"
APT_OPTIONS="$APT_OPTIONS -o dir::cache=$APT_CACHE_DIR"

function error() {
    echo " !     $*" >&2
    exit 1
}


function topic() {
    echo "-----> $*"
}


function indent() {
    c='s/^/       /'
    case $(uname) in
        Darwin) sed -l "$c";;
        *)      sed -u "$c";;
    esac
}


function create_dirs(){
    mkdir -p "$BUILD_DIR/.apt"
    mkdir -p "$BUILD_DIR/temp"
    mkdir -p "$CACHE_DIR/dirs"
    mkdir -p "$APT_CACHE_DIR/archives/partial"
    mkdir -p "$APT_STATE_DIR/lists/partial"
    mkdir -p "$BUILD_DIR/.profile.d"
}



function install_apt(){
    APTFILE=$1
  
    for PACKAGE in $(cat ${APTFILE}); do
        if [[ $PACKAGE == *deb ]]; then
            PACKAGE_NAME=$(basename $PACKAGE .deb)
            PACKAGE_FILE=$APT_CACHE_DIR/archives/00_$PACKAGE_NAME.deb
      
            topic "Fetching $PACKAGE"
            curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
        else
            topic "Fetching .debs for $PACKAGE"
            apt-get $APT_OPTIONS -y --force-yes -d install $PACKAGE --reinstall | indent
        fi
    done
   
    for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
        topic "Installing $(basename $DEB)"
        # Check if packages must be placed in temp dir
        if [[ $APTFILE =~ Apttemp ]]; then
            dpkg -x $DEB $BUILD_DIR/temp/
        else
            dpkg -x $DEB $BUILD_DIR/.apt/
        fi
    done
  
    rm -rf $APT_CACHE_DIR/archives/*.deb
}



# Main
function main() {
    create_dirs
    
    # Test cache dirs and environment
    if [[ $USE_CACHE -ne 1 ]] || [[ ! -d $CACHE_DIR/dirs/.apt ]] || [[ ! -d $CACHE_DIR/dirs/temp ]]; then
        topic "Add gpg keys..."
        cp -a /etc/apt/trusted.gpg $BUILD_DIR/temp/trusted.gpg
        apt-key --keyring $BUILD_DIR/temp/trusted.gpg adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF 2>&1 | indent
        apt-key --keyring $BUILD_DIR/temp/trusted.gpg adv --keyserver keyserver.ubuntu.com --recv-keys 126C0D24BD8A2942CC7DF8AC7638D0442B90D010 2>&1 | indent
       
        topic "Updating apt caches"
        apt-get $APT_OPTIONS update 2>&1 | indent
    
        # Install build dependencies
        install_apt $LP_DIR/conf/Apttemp 
        install_apt $LP_DIR/conf/Aptfile
        topic "Creating cache directories..."
        cp -ra $BUILD_DIR/.apt $CACHE_DIR/dirs/ 2>&1 | indent
        cp -ra $BUILD_DIR/temp $CACHE_DIR/dirs/ 2>&1 | indent
    else
        topic "Restoring .apt and temp from cache..."
        cp -ra $CACHE_DIR/dirs/.apt $BUILD_DIR/ 2>&1 | indent
        echo "Restored .apt in $BUILD_DIR/.apt" | indent
        cp -ra $CACHE_DIR/dirs/temp $BUILD_DIR/
        echo "Restored temp in $BUILD_DIR/temp" | indent
    fi
    
    
    topic "Copy profile script..."
    cp -ra $LP_DIR/conf/000_apt.sh $BUILD_DIR/.profile.d/000_apt.sh
    chmod +x $BUILD_DIR/.profile.d/000_apt.sh
    
    export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
    export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib"
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$BUILD_DIR/temp/usr/lib/x86_64-linux-gnu:$BUILD_DIR/temp/usr/lib/i386-linux-gnu:$BUILD_DIR/temp/usr/lib:$LD_LIBRARY_PATH"
    export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib"
    export LIBRARY_PATH="$LIBRARY_PATH:$BUILD_DIR/temp/usr/lib/x86_64-linux-gnu:$BUILD_DIR/temp/usr/lib/i386-linux-gnu:$BUILD_DIR/temp/usr/lib:$LIBRARY_PATH"
    export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/temp/usr/include$INCLUDE_PATH"
    export CPATH="$INCLUDE_PATH"
    export CPPPATH="$INCLUDE_PATH"
    export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
      
    # Change mono paths to avoid node-gyp install crash
    sed -e "s|.*/usr/|$BUILD_DIR/temp/usr/|g" -i $BUILD_DIR/temp/usr/bin/dmcs 2>&1 | indent
    
    
    export DNX_USER_HOME=$BUILD_DIR/.dnx
    export DNX_GLOBAL_HOME=$BUILD_DIR/.apt/usr/local/lib/dnx
    mkdir -p $DNX_GLOBAL_HOME
      
    # Delete temporal folder
    rm -rf $BUILD_DIR/temp
    
    # Set HOME environment to original value
    export HOME=$HOME_APP
    
    export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"
}

main

